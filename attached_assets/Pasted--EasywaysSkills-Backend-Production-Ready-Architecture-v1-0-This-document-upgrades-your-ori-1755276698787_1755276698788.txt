# EasywaysSkills Backend — Production-Ready Architecture (v1.0)

> This document upgrades your original spec into a production-ready plan. It keeps your core scope while tightening security, scaling paths, schema correctness, DevOps, and observability. Code examples use Node.js + Express with TypeScript, but the structure is framework-agnostic.

---

## 1) Goals & Non‑Goals

**Goals**

* Reliable e‑learning backend for auth, catalog, video learning, assessments, e‑commerce, CMS, certificates, comms.
* Strong security posture (token rotation, rate limits, validation, least privilege).
* Clear path from MVP → scale: cache, queues, object storage, CDN.
* Maintainable modular monolith with clean boundaries.

**Non‑Goals (v1)**

* True microservices (consider v2+ when org/traffic demands).
* Realtime chat/whiteboarding (future add-on).

---

## 2) High‑Level Architecture

```
[Client (Web/Mobile)]
      │ REST/JSON + JWT (short‑lived) + Refresh Cookie (httpOnly)
      ▼
[Nginx/ALB]
      │ TLS
      ▼
[Node.js (Express, TypeScript) — Modular Monolith]
  ├─ Auth & Users
  ├─ Catalog (Categories/Courses/Chapters/Lessons)
  ├─ Learning (Progress/Quizzes/Exams)
  ├─ Commerce (Cart/Orders/Payments/Coupons)
  ├─ CMS (Blog/Testimonials)
  ├─ Notifications (Email/Push/In‑app)
  ├─ Certificates
  └─ Admin
      │
      ├── MySQL 8 (InnoDB, utf8mb4)  ◄──────────────┐
      ├── Redis (cache, sessions, rate limit)       │
      ├── S3‑compatible Object Storage (assets,     │
      │    videos) + CDN (CloudFront/Cloudflare)    │
      ├── Queue (BullMQ on Redis) — emails,         │
      │    webhooks, certificate gen, heavy jobs    │
      └── Search (Meilisearch/Algolia) [optional]   │
                                                    │
[Observability]
  ├─ Logs (Winston → Loki/CloudWatch/Datadog)
  ├─ Metrics/Tracing (OpenTelemetry → Prometheus/Grafana/Datadog)
  └─ Alerts (PagerDuty/Slack)
```

---

## 3) Technology Stack

* **Runtime/Framework**: Node.js 20 LTS, Express.js + TypeScript. (NestJS is a safe alternative if you prefer strong conventions.)
* **ORM/Query**: Prisma or Knex.js (Prisma recommended for speed and type‑safety).
* **DB**: MySQL 8.0 (InnoDB, utf8mb4\_0900\_ai\_ci). Use **BIGINT** PKs; expose short **public\_id** (ULIDs) for external links.
* **Cache/Queues**: Redis 7 (for caching, rate limiting, BullMQ queues).
* **Object Storage**: S3‑compatible (AWS S3/Wasabi/Backblaze) + **CDN**. Avoid serving large files from server root.
* **Video**: Use VOD provider (Mux/Cloudflare Stream) for upload, transcoding, DRM-ish signed playback URLs. (MVP: S3 + CloudFront.)
* **Email**: Transactional provider (Postmark/SendGrid) with SMTP fallback. Store templates/versioning.
* **Payments**: Stripe (Payment Intents). Keep PayPal optional as secondary.
* **Docs**: Swagger/OpenAPI v3 via `swagger-ui-express` or `@nestjs/swagger`.
* **Security**: `helmet`, `cors`, `express-rate-limit`, `zod` or `joi` for validation.

---

## 4) API Design & Conventions

* **Base URL**: `/api/v1` (version via path).
* **Auth**: Access token (15–60m) in `Authorization: Bearer`, Refresh token (7–30d) in **httpOnly, Secure, SameSite=Lax** cookie.
* **Idempotency**: Use `Idempotency-Key` header for payment/order creation.
* **Pagination**: `page`, `limit`; return `total`, `hasNext`, `hasPrev`.
* **Sorting/Filtering**: whitelists per resource; reject unknown fields.
* **Errors**: single envelope

  ```json
  {"success": false, "error": {"code": "string", "message": "string", "details": {}, "traceId": "uuid"}}
  ```
* **Request Validation**: zod schemas per route; 422 for validation errors.
* **Correlation**: `X-Request-ID` in/out; include in logs.

---

## 5) Security Hardening

* **Passwords**: Argon2id (preferred) or bcrypt (12+ rounds). Enforce minimum length & breach check (HaveIBeenPwned k‑anon).
* **JWT**: asym keys (RS256/ES256). Rotate keys. Store token version on user to revoke.
* **Refresh**: rotate on each use; maintain allow‑list with device fingerprint & IP/UA (short retention).
* **MFA**: Optional TOTP for admins/instructors.
* **Rate Limits**: per IP and per user; stricter on auth and coupon endpoints.
* **CSRF**: Not required for pure Bearer; **required** if you keep cookies for access tokens. Here we keep only refresh in cookie → CSRF on refresh route.
* **File Uploads**: AV scan (ClamAV/Lambda), size/type limits, presigned PUT to S3.
* **Secrets**: Vault/Parameter Store; never in repo.
* **RBAC**: roles `student|instructor|admin`; consider permission table for fine‑grained actions.

---

## 6) Data Modeling Principles

* **Primary Keys**: `BIGINT AUTO_INCREMENT` internal, plus `public_id CHAR(26)` ULID with unique index for URLs.
* **Timestamps**: `created_at`, `updated_at`, `deleted_at` (soft delete where applicable). Store UTC, return ISO 8601.
* **Avoid heavy JSON** for queryable lists (tags, objectives, requirements); normalize with join tables (you can keep JSON for write‑time convenience but indexable tables scale better).
* **Collation**: `utf8mb4_0900_ai_ci` globally.
* **Indexes**: plan for catalog filters: category, level, price, rating, student\_count, is\_published.

---

## 7) Corrected & Enhanced Schema (selected tables)

> This section fixes SQL syntax issues, normalizes key lists, and adds indexes & constraints. Use as the *source of truth* for migrations. (Prisma schema recommended in code.)

### 7.1 Users & Profiles

```sql
CREATE TABLE users (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  public_id CHAR(26) NOT NULL UNIQUE, -- ULID
  first_name VARCHAR(50) NOT NULL,
  last_name  VARCHAR(50) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(32),
  age TINYINT UNSIGNED,
  password_hash VARCHAR(255) NOT NULL,
  avatar_url VARCHAR(1000),
  role ENUM('student','instructor','admin') NOT NULL DEFAULT 'student',
  is_verified BOOLEAN NOT NULL DEFAULT FALSE,
  email_verification_token VARCHAR(255),
  password_reset_token VARCHAR(255),
  password_reset_expires DATETIME,
  token_version INT NOT NULL DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  deleted_at TIMESTAMP NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE user_profiles (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL UNIQUE,
  bio TEXT,
  linkedin_url VARCHAR(1000),
  github_url   VARCHAR(1000),
  experience_level ENUM('beginner','intermediate','advanced'),
  CONSTRAINT fk_user_profiles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
```

### 7.2 Catalog Normalization

```sql
CREATE TABLE categories (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  slug VARCHAR(150) NOT NULL UNIQUE,
  name VARCHAR(120) NOT NULL UNIQUE,
  description TEXT,
  icon VARCHAR(100),
  color CHAR(7),
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  sort_order INT NOT NULL DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE instructors (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL UNIQUE,
  title VARCHAR(120),
  experience_years INT,
  total_students INT NOT NULL DEFAULT 0,
  total_courses  INT NOT NULL DEFAULT 0,
  rating DECIMAL(3,2) NOT NULL DEFAULT 5.00,
  bio TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_instructors_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE courses (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  public_id CHAR(26) NOT NULL UNIQUE,
  title VARCHAR(220) NOT NULL,
  slug  VARCHAR(260) NOT NULL UNIQUE,
  description TEXT NOT NULL,
  category_id BIGINT NOT NULL,
  instructor_id BIGINT NOT NULL,
  image_url VARCHAR(1000),
  trailer_video_url VARCHAR(1000),
  level ENUM('beginner','intermediate','advanced') NOT NULL,
  duration_minutes INT,
  language ENUM('English','Français','Arabic') NOT NULL DEFAULT 'English',
  rating DECIMAL(3,2) NOT NULL DEFAULT 0.00,
  student_count INT NOT NULL DEFAULT 0,
  is_certified BOOLEAN NOT NULL DEFAULT TRUE,
  last_updated DATE,
  is_published BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_courses_category   FOREIGN KEY (category_id)  REFERENCES categories(id),
  CONSTRAINT fk_courses_instructor FOREIGN KEY (instructor_id) REFERENCES instructors(id)
);

-- Normalized lists
CREATE TABLE course_requirement (
  course_id BIGINT NOT NULL,
  requirement VARCHAR(255) NOT NULL,
  sort_order INT NOT NULL DEFAULT 0,
  PRIMARY KEY (course_id, sort_order),
  CONSTRAINT fk_req_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE course_objective (
  course_id BIGINT NOT NULL,
  objective VARCHAR(255) NOT NULL,
  sort_order INT NOT NULL DEFAULT 0,
  PRIMARY KEY (course_id, sort_order),
  CONSTRAINT fk_obj_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE tags (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  slug VARCHAR(120) NOT NULL UNIQUE,
  label VARCHAR(120) NOT NULL UNIQUE
);

CREATE TABLE course_tag (
  course_id BIGINT NOT NULL,
  tag_id BIGINT NOT NULL,
  PRIMARY KEY (course_id, tag_id),
  CONSTRAINT fk_ct_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE,
  CONSTRAINT fk_ct_tag    FOREIGN KEY (tag_id)    REFERENCES tags(id)    ON DELETE CASCADE
);

CREATE TABLE course_pricing (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  course_id BIGINT NOT NULL,
  tier ENUM('basic','pro','premium') NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  original_price DECIMAL(10,2),
  features TEXT, -- keep simple; show per tier
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  UNIQUE KEY uq_course_tier (course_id, tier),
  CONSTRAINT fk_cp_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE chapters (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  course_id BIGINT NOT NULL,
  title VARCHAR(220) NOT NULL,
  description TEXT,
  sort_order INT NOT NULL,
  estimated_duration_minutes INT,
  is_locked BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_ch_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE,
  INDEX idx_ch_course_order (course_id, sort_order)
);

CREATE TABLE lessons (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  chapter_id BIGINT NOT NULL,
  title VARCHAR(220) NOT NULL,
  description TEXT,
  type ENUM('video','project') NOT NULL,
  video_url VARCHAR(1000),
  presentation_url VARCHAR(1000),
  overview LONGTEXT NOT NULL,
  sort_order INT NOT NULL,
  is_preview BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_ls_chapter FOREIGN KEY (chapter_id) REFERENCES chapters(id) ON DELETE CASCADE,
  INDEX idx_ls_chapter_order (chapter_id, sort_order)
);

CREATE TABLE exercises (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  lesson_id BIGINT NOT NULL,
  title VARCHAR(220) NOT NULL,
  description TEXT NOT NULL,
  instructions TEXT,
  CONSTRAINT fk_ex_lesson FOREIGN KEY (lesson_id) REFERENCES lessons(id) ON DELETE CASCADE
);
```

### 7.3 Learning & Assessment

```sql
CREATE TABLE user_course_progress (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  course_id BIGINT NOT NULL,
  enrollment_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  completion_date TIMESTAMP NULL,
  progress_percentage DECIMAL(5,2) NOT NULL DEFAULT 0.00,
  last_accessed TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  pricing_tier ENUM('basic','pro','premium') NOT NULL,
  status ENUM('enrolled','completed','dropped') NOT NULL DEFAULT 'enrolled',
  UNIQUE KEY uq_user_course (user_id, course_id),
  CONSTRAINT fk_ucp_user   FOREIGN KEY (user_id)  REFERENCES users(id)   ON DELETE CASCADE,
  CONSTRAINT fk_ucp_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE user_lesson_progress (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  lesson_id BIGINT NOT NULL,
  is_completed BOOLEAN NOT NULL DEFAULT FALSE,
  completion_date TIMESTAMP NULL,
  watch_time_seconds INT NOT NULL DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_user_lesson (user_id, lesson_id),
  CONSTRAINT fk_ulp_user   FOREIGN KEY (user_id)   REFERENCES users(id)   ON DELETE CASCADE,
  CONSTRAINT fk_ulp_lesson FOREIGN KEY (lesson_id) REFERENCES lessons(id) ON DELETE CASCADE
);

-- Quizzes normalized (no JSON questions)
CREATE TABLE quizzes (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  chapter_id BIGINT NOT NULL,
  title VARCHAR(220) NOT NULL,
  passing_score INT NOT NULL DEFAULT 80,
  time_limit_minutes INT NOT NULL DEFAULT 15,
  attempts_allowed INT NOT NULL DEFAULT 3,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_qz_ch FOREIGN KEY (chapter_id) REFERENCES chapters(id) ON DELETE CASCADE
);

CREATE TABLE quiz_questions (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  quiz_id BIGINT NOT NULL,
  prompt TEXT NOT NULL,
  sort_order INT NOT NULL,
  CONSTRAINT fk_qq_quiz FOREIGN KEY (quiz_id) REFERENCES quizzes(id) ON DELETE CASCADE
);

CREATE TABLE quiz_options (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  question_id BIGINT NOT NULL,
  label TEXT NOT NULL,
  is_correct BOOLEAN NOT NULL DEFAULT FALSE,
  CONSTRAINT fk_qo_q FOREIGN KEY (question_id) REFERENCES quiz_questions(id) ON DELETE CASCADE
);

CREATE TABLE quiz_attempts (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  quiz_id BIGINT NOT NULL,
  score DECIMAL(5,2),
  started_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  completed_at TIMESTAMP NULL,
  time_taken_minutes INT,
  is_passed BOOLEAN NOT NULL DEFAULT FALSE,
  attempt_number INT NOT NULL DEFAULT 1,
  UNIQUE KEY uq_attempt (user_id, quiz_id, attempt_number),
  CONSTRAINT fk_qza_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_qza_quiz FOREIGN KEY (quiz_id) REFERENCES quizzes(id) ON DELETE CASCADE
);

CREATE TABLE quiz_answers (
  attempt_id BIGINT NOT NULL,
  question_id BIGINT NOT NULL,
  option_id BIGINT NOT NULL,
  PRIMARY KEY (attempt_id, question_id),
  CONSTRAINT fk_qa_attempt  FOREIGN KEY (attempt_id)  REFERENCES quiz_attempts(id)   ON DELETE CASCADE,
  CONSTRAINT fk_qa_question FOREIGN KEY (question_id) REFERENCES quiz_questions(id) ON DELETE CASCADE,
  CONSTRAINT fk_qa_option   FOREIGN KEY (option_id)   REFERENCES quiz_options(id)   ON DELETE CASCADE
);

-- Exams & submissions
CREATE TABLE exams (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  course_id BIGINT NOT NULL,
  title VARCHAR(220) NOT NULL,
  description TEXT,
  duration_minutes INT NOT NULL,
  total_marks INT NOT NULL DEFAULT 100,
  passing_marks INT NOT NULL DEFAULT 70,
  attempts_limit INT NOT NULL DEFAULT 3,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_ex_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE exam_resources (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  exam_id BIGINT NOT NULL,
  file_name VARCHAR(255) NOT NULL,
  file_description TEXT,
  file_type VARCHAR(100) NOT NULL,
  file_url VARCHAR(1000) NOT NULL,
  CONSTRAINT fk_er_exam FOREIGN KEY (exam_id) REFERENCES exams(id) ON DELETE CASCADE
);

CREATE TABLE exam_submissions (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  exam_id BIGINT NOT NULL,
  submission_notes TEXT,
  started_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  submitted_at TIMESTAMP NULL,
  graded_at TIMESTAMP NULL,
  score DECIMAL(5,2),
  feedback TEXT,
  status ENUM('in progress','submitted','graded','revision_required') NOT NULL DEFAULT 'in progress',
  attempt_number INT NOT NULL DEFAULT 1,
  UNIQUE KEY uq_exam_attempt (user_id, exam_id, attempt_number),
  CONSTRAINT fk_es_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_es_exam FOREIGN KEY (exam_id) REFERENCES exams(id) ON DELETE CASCADE
);

CREATE TABLE exam_submission_files (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  submission_id BIGINT NOT NULL,
  file_name VARCHAR(255) NOT NULL,
  file_type VARCHAR(100) NOT NULL,
  file_url VARCHAR(1000) NOT NULL,
  CONSTRAINT fk_esf_submission FOREIGN KEY (submission_id) REFERENCES exam_submissions(id) ON DELETE CASCADE
);
```

### 7.4 Commerce

```sql
CREATE TABLE cart_items (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  course_id BIGINT NOT NULL,
  pricing_tier ENUM('basic','pro','premium') NOT NULL,
  base_price DECIMAL(10,2) NOT NULL,
  added_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_user_course_cart (user_id, course_id),
  CONSTRAINT fk_ci_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_ci_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE orders (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  public_id CHAR(26) NOT NULL UNIQUE,
  user_id BIGINT NOT NULL,
  total_amount DECIMAL(10,2) NOT NULL,
  payment_status ENUM('pending','completed','failed','refunded') NOT NULL DEFAULT 'pending',
  payment_provider ENUM('stripe','paypal') NOT NULL,
  payment_transaction_id VARCHAR(255),
  idempotency_key VARCHAR(64),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  UNIQUE KEY uq_idem (idempotency_key)
);

CREATE TABLE order_items (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  order_id BIGINT NOT NULL,
  course_id BIGINT NOT NULL,
  pricing_tier ENUM('basic','pro','premium') NOT NULL,
  base_price DECIMAL(10,2) NOT NULL,
  CONSTRAINT fk_oi_order  FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
  CONSTRAINT fk_oi_course FOREIGN KEY (course_id) REFERENCES courses(id)
);

CREATE TABLE coupons (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  code VARCHAR(64) NOT NULL UNIQUE,
  description VARCHAR(255),
  discount_type ENUM('percentage','fixed') NOT NULL,
  discount_value DECIMAL(10,2) NOT NULL,
  usage_limit INT,
  per_user_limit INT DEFAULT 1,
  used_count INT NOT NULL DEFAULT 0,
  valid_from DATETIME NOT NULL,
  valid_until DATETIME NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE coupon_redemptions (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  coupon_id BIGINT NOT NULL,
  user_id BIGINT NOT NULL,
  order_id BIGINT NOT NULL,
  discount_amount DECIMAL(10,2) NOT NULL,
  used_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_coupon_user_order (coupon_id, user_id, order_id),
  CONSTRAINT fk_cr_coupon FOREIGN KEY (coupon_id) REFERENCES coupons(id),
  CONSTRAINT fk_cr_user   FOREIGN KEY (user_id)   REFERENCES users(id),
  CONSTRAINT fk_cr_order  FOREIGN KEY (order_id)  REFERENCES orders(id)
);
```

### 7.5 CMS, Reviews, Notifications, Certificates

```sql
CREATE TABLE blog_posts (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  author_id BIGINT,
  title VARCHAR(220) NOT NULL,
  slug  VARCHAR(260) NOT NULL UNIQUE,
  description TEXT,
  content LONGTEXT NOT NULL,
  featured_image VARCHAR(1000),
  category VARCHAR(150),
  view_count INT NOT NULL DEFAULT 0,
  is_published BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_bp_author FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE SET NULL
);

CREATE TABLE testimonials (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  course_id BIGINT,
  name VARCHAR(150) NOT NULL,
  role VARCHAR(150),
  content TEXT NOT NULL,
  rating DECIMAL(3,2) NOT NULL,
  image_url VARCHAR(1000),
  is_approved BOOLEAN NOT NULL DEFAULT FALSE,
  is_featured BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_t_user   FOREIGN KEY (user_id)   REFERENCES users(id),
  CONSTRAINT fk_t_course FOREIGN KEY (course_id) REFERENCES courses(id)
);

CREATE TABLE newsletter_subscribers (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  email VARCHAR(255) NOT NULL UNIQUE,
  name VARCHAR(150),
  is_subscribed BOOLEAN NOT NULL DEFAULT TRUE,
  subscribed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  unsubscribed_at TIMESTAMP NULL,
  verification_token VARCHAR(255),
  is_verified BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE course_reviews (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  course_id BIGINT NOT NULL,
  rating DECIMAL(3,2) NOT NULL,
  review_text TEXT,
  is_approved BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_user_course_review (user_id, course_id),
  CONSTRAINT fk_crv_user   FOREIGN KEY (user_id)   REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_crv_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE certificates (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  public_id CHAR(26) NOT NULL UNIQUE,
  user_id BIGINT NOT NULL,
  course_id BIGINT NOT NULL,
  certificate_number VARCHAR(120) NOT NULL UNIQUE,
  issued_date DATE NOT NULL,
  certificate_url VARCHAR(1000),
  verification_code VARCHAR(120) UNIQUE,
  is_valid BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_cert_user   FOREIGN KEY (user_id)   REFERENCES users(id)   ON DELETE CASCADE,
  CONSTRAINT fk_cert_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE notifications (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  title VARCHAR(220) NOT NULL,
  message TEXT NOT NULL,
  type ENUM('info','success','warning','error') NOT NULL DEFAULT 'info',
  category ENUM('course','payment','system','marketing') NOT NULL DEFAULT 'system',
  is_read BOOLEAN NOT NULL DEFAULT FALSE,
  action_url VARCHAR(1000),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_notif_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE email_logs (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  recipient_email VARCHAR(255) NOT NULL,
  subject VARCHAR(220) NOT NULL,
  template_name VARCHAR(120),
  status ENUM('sent','failed','bounced') NOT NULL DEFAULT 'sent',
  error_message TEXT,
  sent_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
```

---

## 8) Payments Flow (Stripe)

1. Client adds to cart → server calculates totals, taxes, discounts.
2. `POST /orders` with `Idempotency-Key` → creates DB order (status `pending`) + Stripe Payment Intent; return `clientSecret`.
3. Client confirms payment → webhook \`\` updates order → `completed` and enrolls courses; **send receipts, notifications**.
4. Handle failures & retries via webhooks (`payment_intent.payment_failed`).
5. Refunds/voids via explicit endpoints; store audit trail.

**Webhooks**: verify signature, queue jobs, idempotent by `event.id` stored in DB.

---

## 9) Caching Strategy

* **Catalog**: course list pages (`GET /courses`) cached 30–120s in Redis; bust on course update/publish.
* **Course detail**: cache 60s; include ETag/Last‑Modified.
* **User dashboard**: no shared cache (user‑specific), but memoize expensive aggregates briefly (10–30s) keyed by `user_id`.

---

## 10) Background Jobs (BullMQ)

* Send transactional emails (welcome, verification, password reset, receipts, enrollment, certificate).
* Generate & upload certificate PDFs.
* Transcode video (if self‑hosted) or handoff to VOD provider; poll status.
* Nightly digest emails/newsletters.
* Cleanup (expired resets, stale carts, soft‑deleted purge).

---

## 11) Service Layout (Express + TS)

```
src/
  app.ts (express init, middleware)
  server.ts
  config/
  middleware/ (auth, rateLimit, validate, error)
  modules/
    auth/
      auth.controller.ts
      auth.service.ts
      auth.routes.ts
      auth.schemas.ts
    users/
    catalog/ (categories, courses, chapters, lessons)
    learning/ (progress, quizzes, exams)
    commerce/ (cart, orders, payments, coupons)
    cms/ (blog, testimonials)
    notifications/
    certificates/
  db/ (prisma schema or knex migrations)
  jobs/ (queues, processors)
  utils/
```

**Example route (snippet)**

```ts
router.post('/auth/login', validate(LoginSchema), rateLimit.auth, async (req, res) => {
  const { email, password } = req.body;
  const user = await authService.verifyCredentials(email, password);
  const { accessToken, refreshToken } = await authService.issueTokens(user);
  setRefreshCookie(res, refreshToken);
  return res.json({ success: true, data: { user: publicUser(user), token: accessToken } });
});
```

---

## 12) Middleware

* `helmet`, `cors`, `compression`, `morgan`/Winston JSON logs.
* Central error handler → maps `ZodError`/`PrismaError` to unified error envelope.
* AuthN (`authenticate`) and RBAC (`authorize([...])`) as you drafted; add **token version** check to support revocation.
* Per‑route `express-rate-limit` policies.

---

## 13) Observability

* **Logs**: structured JSON with `level, timestamp, reqId, userId, path, status, latency_ms`.
* **Metrics**: request latency, error rate, DB query duration, queue depth, webhook success ratio, email bounce rate.
* **Tracing**: instrument DB, Redis, HTTP, queue spans (OpenTelemetry + OTLP exporter).

---

## 14) Testing Strategy

* **Unit**: services/utilities with Jest.
* **Integration**: supertest against ephemeral MySQL/Redis (Testcontainers or Docker compose).
* **E2E smoke**: critical flows (signup→enroll→watch→quiz→certificate→invoice).
* **Load**: k6/Artillery scenarios for catalog & checkout.

---

## 15) Deployment & DevOps

* **CI**: lint, test, build, db migrate, image build; sign images.
* **CD**: blue‑green or rolling; zero‑downtime migrations (additive first, backfill, then drop).
* **Infra**:

  * Containerized app behind ALB/Nginx; autoscaling.
  * MySQL managed (RDS/Aurora or equivalent): daily snapshots, PITR, read replica ready path.
  * Redis managed (ElastiCache/Upstash).
  * S3 + CDN; WAF; TLS Everywhere.
* **Backups/DR**: 3‑2‑1 rule; restore runbooks.

---

## 16) API Surface (Selected Endpoints)

Your original endpoints map well. Minor upgrades:

* **Auth**: `POST /auth/refresh` (CSRF protected), `POST /auth/logout` → revoke refresh (increment token\_version).
* **Courses**: `GET /courses` adds `language`, `tag`, `instructor`, `isPublished` filters; `sortBy` whitelist; include cache headers.
* **Orders**: `/orders` (create), `/orders/:id/confirm`, webhooks at `/webhooks/stripe` (no auth, signature verification).
* **Certificates**: `GET /certificates/:publicId` public verification endpoint.

All endpoints follow the response envelope you defined and include `traceId`.

---

## 17) Fixes vs Original Spec (quick list)

* Removed SQL trailing commas and FK conflicts (e.g., `blog_posts.author_id NOT NULL` vs `ON DELETE SET NULL`).
* Normalized JSON lists (requirements/objectives/tags) into tables for filterable queries and indexing.
* Added ULID `public_id` for orders/certificates/courses to avoid exposing sequential IDs.
* Added unique & composite indexes for common filters/sorts.
* Added idempotency key on orders; unique attempt constraints for quizzes/exams.
* Replaced server‑root file/video storage with S3 + CDN and/or VOD provider.
* Added token rotation & token versioning for JWT revocation.
* Added queueing, observability, and proper webhook handling.

---

## 18) Roadmap (MVP → V2)

**MVP (4–6 weeks)**

* Auth (email verify/reset, JWT rotation), Users/Profiles.
* Catalog (Courses/Chapters/Lessons), Enrollment & Progress.
* Checkout with Stripe (webhooks), Coupons, Receipts.
* Basic CMS (Blog), Reviews, Notifications (email + in‑app).
* Certificates (PDF gen + verification endpoint).
* OpenAPI docs, CI/CD, monitoring baseline.

**V2**

* VOD provider integration (signed playback), subtitle tracks.
* Search (Meilisearch), recommendations, wishlist.
* MFA, SSO (Google), web push, instructor revenue shares.
* Analytics dashboards, cohort analysis, A/B tests.

---

## 19) Appendix — Example Zod Schemas & Validation

```ts
export const RegisterSchema = z.object({
  firstName: z.string().min(2),
  lastName: z.string().min(2),
  email: z.string().email(),
  phone: z.string().optional(),
  age: z.number().int().min(13).max(120),
  password: z.string().min(8),
  confirmPassword: z.string()
}).refine(d => d.password === d.confirmPassword, {
  path: ['confirmPassword'], message: 'Passwords do not match'
});
```

---

## 20) Appendix — Stripe Webhook Handler (Idempotent)

```ts
router.post('/webhooks/stripe', rawBodyMiddleware, async (req, res) => {
  const sig = req.headers['stripe-signature'] as string;
  let event;
  try { event = stripe.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET); }
  catch (err) { return res.status(400).send('Invalid signature'); }

  // dedupe by event.id
  if (await eventsRepo.seen(event.id)) return res.status(200).end();

  await queue.add('stripe-event', event); // process async
  return res.status(200).end();
});
```

---

## 21) Appendix — Certificate Numbering

* Format: `EWS-<YYYY>-<ULID 6>` (e.g., `EWS-2025-01F8Z6`).
* Store `public_id` and `verification_code` for public lookup.

---

**End of document.**
